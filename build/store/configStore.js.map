{"version":3,"sources":["../../src/store/configStore.js"],"names":["configureStore","latestStore","__apolloClient","rootReducer","logger","promise","initState","client","isServer","reducer","window","Object","assign","apollo","middleware","store","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__"],"mappings":";;;;;kBA4BwBA,c;;AA3BxB;;AAKA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAPA;;;AAQA,IAAIC,oBAAJ;AACA,IAAIC,uBAAJ;;AAEA,IAAIC,oBAAJ;AACA,IAAMC,SAAS,4BAAf;AACA,IAAMC,UAAU,uCAAhB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASL,cAAT,CAAwBM,SAAxB,EAA2CC,MAA3C,EAAwDC,QAAxD,EAA2E;AACtFN,qBAAiBK,OAAOE,OAAP,EAAjB;AACA,QAAID,YAAY,OAAOE,MAAP,KAAkB,WAAlC,EAA+C;AAC3CP,sBAAc,4BAAgBQ,OAAOC,MAAP,CAAc,EAAd,sBAA4B,EAAEC,QAAQX,cAAV,EAA5B,CAAhB,CAAd;AACAD,sBAAc,wBACVE,WADU,EAEV,EAFU,EAGV,oBAAQ,kDAAuBE,OAAvB,EAAgCD,MAAhC,EAAwCG,OAAOO,UAAP,EAAxC,CAAR,CAHU,CAAd;AAIA,eAAOb,WAAP;AACH,KAPD,MAOO;AACH,YAAI,CAACS,OAAOK,KAAZ,EAAmB;AACf,gBAAMC,mBAAmBN,OAAOO,oCAAP,kBAAzB;AACAd,0BAAc,4BAAgBQ,OAAOC,MAAP,CAAc,EAAd,sBAA4B,EAAEC,QAAQX,cAAV,EAA5B,CAAhB,CAAd;AACAQ,mBAAOK,KAAP,GAAed,cAAc,wBACzBE,WADyB,EAEzB,EAFyB,EAGzBa,iBAAiB,kDAAuBX,OAAvB,EAAgCD,MAAhC,EAAwCG,OAAOO,UAAP,EAAxC,CAAjB,CAHyB,CAA7B;AAKH;AACD,eAAOJ,OAAOK,KAAd;AACH;AACJ","file":"configStore.js","sourcesContent":["\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\n\n/**\n * Dev middleware\n */\nimport createLogger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nimport reducers from '../reducers';\nlet latestStore;\nlet __apolloClient;\n\nlet rootReducer;\nconst logger = createLogger();\nconst promise = promiseMiddleware();\n/**\n * Hot load reducers\n */\n// if (module.hot) {\n//     module.hot.accept('../reducers', () => {\n//         let newReducer = require('../reducers').default;\n//         rootReducer = combineReducers(Object.assign({}, reducers, { apollo: __apolloClient }));\n//         latestStore.replaceReducer(rootReducer); // eslint-disable-line global-require\n//     });\n// }\n\nexport default function configureStore(initState: Object, client: any, isServer: boolean) {\n    __apolloClient = client.reducer();\n    if (isServer && typeof window === 'undefined') {\n        rootReducer = combineReducers(Object.assign({}, reducers, { apollo: __apolloClient }));\n        latestStore = createStore(\n            rootReducer,\n            {},\n            compose(applyMiddleware(thunk, promise, logger, client.middleware())));\n        return latestStore;\n    } else {\n        if (!window.store) {\n            const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n            rootReducer = combineReducers(Object.assign({}, reducers, { apollo: __apolloClient }));\n            window.store = latestStore = createStore(\n                rootReducer,\n                {},\n                composeEnhancers(applyMiddleware(thunk, promise, logger, client.middleware())));\n\n        }\n        return window.store;\n    }\n}\n"]}