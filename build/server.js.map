{"version":3,"sources":["../src/server.js"],"names":["bodyParser","dev","process","env","NODE_ENV","app","dir","handle","getRequestHandler","logger","prefix","info","MONGO_URI","require","config","path","join","__dirname","prepare","then","server","use","endpointURL","json","schema","typeDefs","resolvers","start","get","req","res"],"mappings":";;AACA;;IAAYA,U;;AACZ;;AACA;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA;AACA,IAAMC,MAAMC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAArC;AACA,IAAMC,MAAM,oBAAK,EAAEC,KAAK,OAAP,EAAgBL,QAAhB,EAAL,CAAZ;AACA,IAAMM,SAASF,IAAIG,iBAAJ,EAAf;;AAEA,IAAMC,SAAS,sBAAY,EAAEC,QAAQ,MAAV,EAAZ,CAAf;AACAD,OAAOE,IAAP,yBAAkCT,QAAQC,GAAR,CAAYS,SAA9C;;AAEAC,QAAQ,QAAR,EAAkBC,MAAlB,CAAyB,EAAEC,MAAM,eAAKC,IAAL,CAAUC,SAAV,EAAqB,SAArB,CAAR,EAAzB;;AAEAZ,IAAIa,OAAJ,GACKC,IADL,CACU,YAAM;AACR,QAAMC,SAAS,wBAAf;AACAA,WAAOC,GAAP,CAAW,qBAAX;AACAD,WAAOC,GAAP,CAAW,WAAX,EAAwB,2CAAgB,EAAEC,aAAa,UAAf,EAAhB,CAAxB;AACAF,WAAOC,GAAP,CAAW,UAAX,EAAuBrB,WAAWuB,IAAX,EAAvB,EAA0C,0CAAe;AACrDC,gBAAQ,wCAAqB;AACzBC,sCADyB;AAEzBC;AAFyB,SAArB;AAD6C,KAAf,CAA1C;;AAOA,4BAASN,MAAT,EAAiBO,KAAjB,CAAuB,YAAM,CAE5B,CAFD;;AAIAP,WAAOQ,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC1B,eAAOvB,OAAOsB,GAAP,EAAYC,GAAZ,CAAP;AACH,KAFD;AAGH,CAnBL","file":"server.js","sourcesContent":["\nimport * as bodyParser from 'body-parser';\nimport { graphqlExpress, graphiqlExpress } from 'graphql-server-express';\nimport { makeExecutableSchema } from 'graphql-tools';\nimport express from 'express';\n\nimport next from 'next';\nimport keystone from './keystone';\n\nimport path from 'path';\nimport cors from 'cors';\nimport Logdown from 'logdown';\nimport Schema from './schema';\nimport resolvers from './resolvers';\n\n// init next\nconst dev = process.env.NODE_ENV !== 'production';\nconst app = next({ dir: './src', dev });\nconst handle = app.getRequestHandler();\n\nconst logger = new Logdown({ prefix: 'core' });\nlogger.info(`start server db => ${process.env.MONGO_URI}`);\n\nrequire('dotenv').config({ path: path.join(__dirname, '../.env') });\n\napp.prepare()\n    .then(() => {\n        const server = express();\n        server.use(cors());\n        server.use('/graphiql', graphiqlExpress({ endpointURL: '/graphql' }));\n        server.use('/graphql', bodyParser.json(), graphqlExpress({\n            schema: makeExecutableSchema({\n                typeDefs: Schema,\n                resolvers,\n            }),\n        }));\n\n        keystone(server).start(() => {\n            \n        });\n        \n        server.get('*', (req, res) => {\n            return handle(req, res);\n        });\n    });\n"]}