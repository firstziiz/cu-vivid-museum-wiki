{"version":3,"sources":["../../src/models/Herbarium.js"],"names":["keystone","require","Types","Field","Gallery","List","autokey","from","path","defaultSort","add","cuid","type","String","name","required","publishedDate","Date","default","now","images","CloudinaryImages","blockNo","Number","slotNo","scientificName","otherName","duplicateAmount","family","collector_en","collector_th","locationName","habit","altitude","date","note","getLatestByPage","args","Promise","resolve","reject","paginate","page","perPage","limit","exec","err","data","register"],"mappings":";;;;;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;;AAEA,IAAMC,QAAQF,SAASG,KAAT,CAAeD,KAA7B;;AAEA;;;;;AAKA,IAAME,UAAU,IAAIJ,SAASK,IAAb,CAAkB,WAAlB,EAA+B;AAC9CC,UAAS,EAAEC,MAAM,MAAR,EAAgBC,MAAM,KAAtB,EADqC;AAE9CC,cAAa;AAFiC,CAA/B,CAAhB;;AAKAL,QAAQM,GAAR,CAAY;AACXC,OAAM,EAAEC,MAAMC,MAAR,EADK;AAEXC,OAAM,EAAEF,MAAMC,MAAR,EAAgBE,UAAU,IAA1B,EAFK;AAGXC,gBAAe,EAAEJ,MAAMK,IAAR,EAAcC,SAASD,KAAKE,GAA5B,EAHJ;AAIXC,SAAQ,EAAER,MAAMV,MAAMmB,gBAAd,EAJG;;AAMXC,UAAS,EAAEV,MAAMW,MAAR,EANE;AAOXC,SAAQ,EAAEZ,MAAMC,MAAR,EAPG;AAQXY,iBAAgB,EAAEb,MAAMC,MAAR,EARL;AASXa,YAAW,EAAEd,MAAMC,MAAR,EATA;AAUXc,kBAAiB,EAAEf,MAAMW,MAAR,EAAgBL,SAAS,CAAzB,EAVN;AAWXU,SAAQ,EAAEhB,MAAMC,MAAR,EAXG;AAYXgB,eAAc,EAAEjB,MAAMC,MAAR,EAZH;AAaXiB,eAAc,EAAElB,MAAMC,MAAR,EAbH;AAcXkB,eAAc,EAAEnB,MAAMC,MAAR,EAdH;AAeXmB,QAAO,EAAEpB,MAAMC,MAAR,EAfI;AAgBXoB,WAAU,EAAErB,MAAMC,MAAR,EAhBC;AAiBXqB,OAAM,EAAEtB,MAAMK,IAAR,EAjBK;AAkBXkB,OAAM,EAAEvB,MAAMC,MAAR;AAlBK,CAAZ;;AAqBAT,QAAQgC,eAAR,GAA0B,UAACC,IAAD,EAAU;AACnC,QAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvCpC,UACEqC,QADF,CACW;AACTC,SAAML,KAAKK,IAAL,IAAa,CADV;AAETC,YAASN,KAAKO,KAAL,IAAc;AAFd,GADX,EAKEC,IALF,CAKO,UAACC,GAAD,EAAMC,IAAN,EAAe;AACpB,OAAID,GAAJ,EAAS;AACRN,WAAOM,GAAP;AACA;AACDP,WAAQQ,IAAR;AACA,GAVF;AAWA,EAZM,CAAP;AAaA,CAdD;;AAgBA3C,QAAQ4C,QAAR;kBACe5C,O","file":"Herbarium.js","sourcesContent":["const keystone = require('keystone');\n\nconst Types = keystone.Field.Types;\n\n/**\n * Gallery Model\n * =============\n */\n\nconst Gallery = new keystone.List('Herbarium', {\n\tautokey: { from: 'name', path: 'key' },\n\tdefaultSort: '-cuid',\n});\n\nGallery.add({\n\tcuid: { type: String },\n\tname: { type: String, required: true },\n\tpublishedDate: { type: Date, default: Date.now },\n\timages: { type: Types.CloudinaryImages },\n\n\tblockNo: { type: Number },\n\tslotNo: { type: String },\n\tscientificName: { type: String },\n\totherName: { type: String },\n\tduplicateAmount: { type: Number, default: 0 },\n\tfamily: { type: String },\n\tcollector_en: { type: String },\n\tcollector_th: { type: String },\n\tlocationName: { type: String },\n\thabit: { type: String },\n\taltitude: { type: String },\n\tdate: { type: Date },\n\tnote: { type: String },\n});\n\nGallery.getLatestByPage = (args) => {\n\treturn new Promise((resolve, reject) => {\n\t\tGallery\n\t\t\t.paginate({\n\t\t\t\tpage: args.page || 0,\n\t\t\t\tperPage: args.limit || 10,\n\t\t\t})\n\t\t\t.exec((err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t\tresolve(data);\n\t\t\t});\n\t});\n};\n\nGallery.register();\nexport default Gallery;\n"]}